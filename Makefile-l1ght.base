PREFIX		:= ppu-
OBJCOPY		:= $(PREFIX)objcopy
AR			:= $(PREFIX)ar
AS			:= $(PREFIX)gcc
CC			:= $(PREFIX)gcc
CXX			:= $(PREFIX)g++
LD			:= $(CXX)
STRIP		:= $(PREFIX)strip
RAW2H		:= $(PSL1GHT)/bin/raw2h
FSELF		:= $(PSL1GHT)/bin/fself.py
SFO			:= $(PSL1GHT)/bin/sfo.py
PS3LOADAPP	:= $(PSL1GHT)/bin/ps3load
SFOXML		:= $(PSL1GHT)/bin/sfo.xml
ICON0		:= $(PSL1GHT)/bin/ICON0.PNG
PKG			:= $(PSL1GHT)/bin/pkg.py
SPRX		:= $(PSL1GHT)/bin/sprxlinker
VPCOMP		:= $(PSL1GHT)/bin/vpcomp

CFLAGS		+= -DL1GHT -g -I$(PSL1GHT)/include -I$(PS3DEV)/ppu/include -I$(PSL1GHT)/include/freetype2 -DMSB_FIRST -DSIZEOF_DOUBLE=8 -DHAVE_MKDIR -DWORDS_BIGENDIAN -D__ppc__ -DC_CORE -D__POWERPC__
CXXFLAGS	+= -DL1GHT -g -I$(PSL1GHT)/include -I$(PS3DEV)/ppu/include -I$(PSL1GHT)/include/freetype2 -DMSB_FIRST -DSIZEOF_DOUBLE=8 -DHAVE_MKDIR -DWORDS_BIGENDIAN -D__ppc__ -DC_CORE -D__POWERPC__
LDFLAGS		+= -T $(PSL1GHT)/lib/linker.x -B$(PSL1GHT)/lib -B$(PS3DEV)/ppu/lib
DEPSOPTIONS	=  -MMD -MP -MF $(DEPSDIR)/$*.d

%.o: %.c
	@[ -d $(CURDIR)/paul/ ] || mkdir -p $(CURDIR)/paul
	@[ -d $(CURDIR)/paul/$(dir $<) ] || mkdir -p $(CURDIR)/paul/$(dir $<)
	@echo "[CC]  $(notdir $<)"
	@$(CC) $(DEPSOPTIONS) $(CFLAGS) $(INCLUDES) -c $< -o $@

%.o: %.cpp
	@[ -d $(CURDIR)/paul/ ] || mkdir -p $(CURDIR)/paul
	@[ -d $(CURDIR)/paul/$(dir $<) ] || mkdir -p $(CURDIR)/paul/$(dir $<)
	@echo "[CXX] $(notdir $<)"
	@$(CXX) $(DEPSOPTIONS) $(CXXFLAGS) $(INCLUDES) -c $< -o $@

%.o: %.S
	@[ -d $(CURDIR)/paul/ ] || mkdir -p $(CURDIR)/paul
	@[ -d $(CURDIR)/paul/$(dir $<) ] || mkdir -p $(CURDIR)/paul/$(dir $<)
	@echo "[CC]  $(notdir $<)"
	@$(CC) $(DEPSOPTIONS) -x assembler-with-cpp $(ASFLAGS) $(INCLUDES) -c $< -o $@

%.a:
	@echo "[AR]  $(notdir $@)"
	@$(AR) -rcs $@ $^

%.elf:
	@echo "[LD]  $(notdir $@)"
	@$(LD) $^ $(LIBPATHS) $(LIBS) $(LDFLAGS) -o $@

%.self: %.elf
	@$(STRIP) $< -o $(BUILDDIR)/$(notdir $<)
	@$(SPRX) $(BUILDDIR)/$(notdir $<)
	@$(FSELF) $(BUILDDIR)/$(notdir $<) $@

%.bin.h: %.bin
	@[ -d $(CURDIR)/paul/ ] || mkdir -p $(CURDIR)/paul
	@[ -d $(CURDIR)/paul/$(dir $<) ] || mkdir -p $(CURDIR)/paul/$(dir $<)
	@echo "[R2H] $(notdir $<)"
	@$(RAW2H) $< $(BUILDDIR)/$(notdir $<).h $(BUILDDIR)/$(notdir $<).S $(notdir $(basename $<)_bin)
	@$(AS) -x assembler-with-cpp $(ASFLAGS) -c $(BUILDDIR)/$(notdir $<).S -o $@.o

%.vcg.h: %.vcg
	@[ -d $(CURDIR)/paul/ ] || mkdir -p $(CURDIR)/paul
	@[ -d $(CURDIR)/paul/$(dir $<) ] || mkdir -p $(CURDIR)/paul/$(dir $<)
	@echo "[VPCOMP] $(notdir $<)"
	@$(VPCOMP) $< $(notdir $(BUILDDIR)/$(basename $<).rvp)
	@$(RAW2H)  $(BUILDDIR)/$(notdir $(basename $<).rvp) $(BUILDDIR)/$(notdir $<).h $(BUILDDIR)/$(notdir $<).S $(notdir $(basename $<)_bin)
	@$(AS) -x assembler-with-cpp $(ASFLAGS) -c $(BUILDDIR)/$(notdir $<).S -o $@.o

################

ifneq ($(BUILD),$(notdir $(CURDIR)))

export OUTPUT	:=	$(CURDIR)/$(TARGET)
export VPATH	:=	../
export BUILDDIR	:=	$(CURDIR)/$(BUILD)
export DEPSDIR	:=	$(BUILDDIR)

CFILES		+= $(foreach dir,$(SOURCE),$(wildcard $(dir)/*.c))
CXXFILES	+= $(foreach dir,$(SOURCE),$(wildcard $(dir)/*.cpp))
SFILES		+= $(foreach dir,$(SOURCE),$(wildcard $(dir)/*.S))
BINFILES	:= $(foreach dir,$(DATA),$(wildcard $(dir)/*.bin))
VCGFILES	:= $(foreach dir,$(SOURCE),$(wildcard $(dir)/*.vcg))


export OFILES	:=	$(CFILES:.c=.o) \
					$(CXXFILES:.cpp=.o) \
					$(SFILES:.S=.o) \
					$(BINFILES:.bin=.bin.h.o) \
					$(VCGFILES:.vcg=.vcg.h.o)


export BINFILES	:=	$(BINFILES:.bin=.bin.h)
export VCGFILES	:=	$(VCGFILES:.vcg=.vcg.h)

export INCLUDES	:=	$(foreach dir,$(INCLUDE),-I$(CURDIR)/$(dir)) \
					-I$(CURDIR)/$(BUILD)
export LIBPATHS :=      $(foreach dir,$(LIBDIRS),-L$(CURDIR)/$(dir))

.PHONY: $(BUILD) clean

$(BUILD):
	@[ -d $@ ] || mkdir -p $@
	@make --no-print-directory -C $(BUILD) -f $(CURDIR)/Makefile

clean:
	@echo Clean...
	@rm -rf $(BUILD) $(OUTPUT).elf $(OUTPUT).self $(OUTPUT) $(OUTPUT).pkg

pkg: $(BUILD)
	@echo Creating PKG...
	@mkdir -p $(BUILD)/pkg
	@mkdir -p $(BUILD)/pkg/USRDIR
	@cp $(ICON0) $(BUILD)/pkg/
	@$(FSELF) -n $(TARGET) $(BUILD)/pkg/USRDIR/EBOOT.BIN
	@$(SFO) --title "$(TITLE)" --appid "$(APPID)" -f $(SFOXML) $(BUILD)/pkg/PARAM.SFO
	@$(PKG) --contentid $(CONTENTID) $(BUILD)/pkg/ $(OUTPUT).pkg

run: $(BUILD)
	@$(PS3LOADAPP) $(OUTPUT).self

else

DEPENDS	:= $(OFILES:.o=.d)

$(OUTPUT): $(OFILES)
$(OFILES): $(BINFILES)  $(VCGFILES)

-include $(DEPENDS)

endif


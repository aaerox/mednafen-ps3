#RULES FOR COMPILE
%.so:
	@echo "[LD]  $(notdir $@)"
	@$(LD) -shared -Wl,-soname,$(TARGET).so.1 -o $@ $^

%.dll:
	@echo "[LD]  $(notdir $@)"
	@$(LD) -shared -o $@ $^

%.a:
	@echo "[AR]  $(notdir $@)"
	@$(AR) -rcs $(TARGET).a $^

%.elf:
	@echo "[LD]  $(notdir $@)"
	@$(LD) $^ $(LDFLAGS) -o $@

%.exe:
	@echo "[LD]  $(notdir $@)"
	@$(LD) $^ $(LDFLAGS) -o $@

################

#Build object list
CFILES		+= $(foreach dir,$(SOURCE),$(wildcard $(dir)/*.c))
HFILES		+= $(foreach dir,$(SOURCE),$(wildcard $(dir)/*.h))
CXXFILES	+= $(foreach dir,$(SOURCE),$(wildcard $(dir)/*.cpp))
SFILES		+= $(foreach dir,$(SOURCE),$(wildcard $(dir)/*.S))
OFILES		+= $(CFILES:.c=.o) $(CXXFILES:.cpp=.o) $(SFILES:.S=.o) 

#Final flags
CFLAGS		+= $(DEPSOPTIONS)
CXXFLAGS	+= $(DEPSOPTIONS)
ASFLAGS		+= $(DEPSOPTIONS)
CPPFLAGS	+= $(foreach dir,$(INCLUDE),-I$(CURDIR)/$(dir))
LDFLAGS		+= $(foreach dir,$(LIBDIRS),-L$(CURDIR)/$(dir))

#SetText (translation support)
ifeq ($(strip $(USE_SETTEXT)),yes)
	CPPFLAGS			+=	-DENABLE_NLS=1 -I$(TOP)system/libintl-hack
endif

#Debug/Release
ifeq ($(strip $(BUILDTYPE)),debug)
	CPPFLAGS			+=	$(DEBUG_CPPFLAGS)
	LDFLAGS				+=	$(DEBUG_LDFLAGS)
else
	CPPFLAGS			+=	$(RELEASE_CPPFLAGS)
	LDFLAGS				+=	$(RELEASE_LDFLAGS)
endif

#Determine output file type
ifeq ($(strip $(TARGETPLATFORM)),windows)
 OUTTYPE				:=	exe
else
 #Probably shouldn't use the elf extension, but oh well
 OUTTYPE				:=	elf
endif

ifeq ($(strip $(TYPE)),lib)
 ifeq ($(strip $(PLATFORM)),dll)
  ifeq ($(strip $(TARGETPLATFORM)),windows)
   OUTTYPE				:=	dll
  else
   OUTTYPE				:=	so
  endif
 else
  OUTTYPE				:=	a
 endif
endif

#Rules
.PHONY: clean

$(TARGET).$(OUTTYPE): $(OFILES)

clean:
	@echo Clean...
	@rm -rf $(TARGET).$(OUTTYPE) $(OFILES) $(OFILES:.o=.d)

pch:
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c pch.h -o pch.h.gch

-include $(OFILES:.o=.d)


/*
	Fragment shader based on "Improved texture interpolation" by Iñigo Quílez
	Original description: http://www.iquilezles.org/www/articles/texture/texture.htm

*/

struct input
{
   float2 video_size;
   float2 texture_size;
   float2 output_size;
};

const float2 box_scale = float2(1.2, 1.0); // 1.2x-1.0y scale.

void main_vertex
(
   float4 position : POSITION,
   out float4 oPosition : POSITION,
   uniform float4x4 modelViewProj,

   float4 color : COLOR,
   out float4 oColor : COLOR,

   float2 tex : TEXCOORD,
   out float2 oTex : TEXCOORD,

   uniform input IN
)
{
   oPosition = mul(modelViewProj, position);
   oColor = color;
   
   float2 scale = (IN.output_size / IN.video_size) / box_scale;
   float2 middle = 0.5 * IN.video_size / IN.texture_size;
   float2 diff = tex.xy - middle;
   oTex = middle + diff * scale;
}


struct output
{
   float4 color : COLOR;
};


output main_fragment (float2 tex : TEXCOORD0, uniform input IN, uniform sampler2D s_p : TEXUNIT0)
{
	float2 p = tex.xy;

	p = p * IN.texture_size + float2(0.5);

	float2 i = floor(p);
	float2 f = p - i;
	f = f * f * f * (f * (f * 6.0 - float2(15.0)) + float2(10.0));
	p = i + f;

	p = (p - float2(0.5)) / IN.texture_size;


// final sum and weight normalization
   output OUT;
   OUT.color = tex2D(s_p, p);
   return OUT;
}

